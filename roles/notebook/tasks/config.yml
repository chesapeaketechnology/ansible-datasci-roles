---
- name: "Install python modules needed by Jupyter"
  pip:
    name: ["pexpect", "cryptography", "PyOpenSSL", "python-consul"]
    executable: pip

- block:
    - name: "Create a dedicated group to run Jupyter"
      group:
        name: "{{ jupyter_user }}"
        gid: 2841
        system: yes
        state: present

    - name: "Create a dedicated user to run Jupyter"
      user:
        name: "{{ jupyter_user }}"
        groups: "{{ jupyter_group }}"
        uid: 2841
        system: yes
        createhome: yes
        state: present

    - name: Add SSH authorized key
      authorized_key:
        user: "{{ jupyter_user }}"
        key: "{{ lookup('file', ssh_public_key) }}"

    - name: "Setup Jupyter notebook directory"
      file:
        path: /data
        state: directory
        owner: "{{ jupyter_user }}"
        group: "{{ jupyter_group }}"
        mode: 0777

- name: "Generate the notebook configuration"
  shell: "{{ jupyter_home }}/jupyter notebook --generate-config -y"
  become_user: jupyter

- name: "Generate a new default password"
  expect:
    command: "{{ jupyter_home }}/jupyter notebook password"
    responses:
      Enter password: "{{ lookup('password', '/tmp/jupyter_pass length=8 chars=ascii_letters') }}"
      Verify password: "{{ lookup('password', '/tmp/jupyter_pass length=8 chars=ascii_letters') }}"
  become_user: jupyter

# - name: "Create OpenSSL directory"
#   file:
#     path: "{{ jupyter_ssl_path }}"
#     state: directory
#     mode: '0644'

- name: Refresh PIP Library
  shell: "pip uninstall cryptography -y --no-input && pip install paramiko -U --no-input"

- name: "Generate an OpenSSL private key"
  openssl_privatekey:
    path: "{{ jupyter_key }}"
    size: 4096
    type: "RSA"

  #shell: "openssl genrsa -out {{ jupyter_key }} 4096"
- name: "Generate an OpenSSL Certificate signing request"
  community.crypto.openssl_csr:
    path: "{{ jupyter_csr }}"
    privatekey_path: "{{ jupyter_key }}"
    common_name: datasci_jupyter

- name: "Generate a self-signed cert"
  openssl_certificate:
    path: "{{ jupyter_cert }}"
    privatekey_path: "{{ jupyter_key }}"
    csr_path: "{{ jupyter_csr }}"
    provider: selfsigned

- name: "Copy cert and key to jupyter_conf"
  shell: "cp {{ item }} {{ jupyter_conf }}"
  with_items:
    - "{{ jupyter_cert }}"
    - "{{ jupyter_key }}"

- name: "Change ownership of copied cert and key"
  file:
    path: "{{ jupyter_conf }}"
    state: directory
    recurse: yes
    owner: "{{ jupyter_user }}"
    group: "{{ jupyter_user }}"

- name: "Update jupyter config with cert"
  lineinfile:
    dest: "{{ jupyter_conf }}/jupyter_notebook_config.py"
    line: "c.NotebookApp.certfile = u'{{ jupyter_conf }}/jupyter.pem'"
    regexp: "^#c.NotebookApp.certfile"
  become_user: "{{ jupyter_user }}"

- name: "Update jupyter config with key"
  lineinfile:
    dest: "{{ jupyter_conf }}/jupyter_notebook_config.py"
    line: "c.NotebookApp.keyfile = u'{{ jupyter_conf }}/jupyter.key'"
    regexp: "^#c.NotebookApp.keyfile"
  become_user: "{{ jupyter_user }}"

- name: "Update jupyter config to bind to all ips"
  lineinfile:
    dest: "{{ jupyter_conf }}/jupyter_notebook_config.py"
    line: "c.NotebookApp.ip = '*'"
    regexp: "^#c.NotebookApp.ip"
  become_user: "{{ jupyter_user }}"

- name: "Update jupyter config to open consistent port"
  lineinfile:
    dest: "{{ jupyter_conf }}/jupyter_notebook_config.py"
    line: "c.NotebookApp.port = 9999"
    regexp: "^#c.NotebookApp.port"
  become_user: "{{ jupyter_user }}"

- name: "Update jupyter config to serve books from /data"
  lineinfile:
    dest: "{{ jupyter_conf }}/jupyter_notebook_config.py"
    line: "c.NotebookApp.notebook_dir = u'/data'"
    regexp: "^#c.NotebookApp.notebook_dir"
  become_user: "{{ jupyter_user }}"
