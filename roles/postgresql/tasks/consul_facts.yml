---
- name: "Add EPEL repo for CentOS"
  package:
      name: epel-release
  when: ansible_os_family == 'RedHat'

- name: "Install pip2"
  package:
    name: python-pip
    state: latest

- name: "Upgrade pip2"
  shell: pip install --upgrade pip

- name: "Install python-consul module"
  pip:
    name: python-consul

- block:
  - name: Verify Consul service is running
    service:
      name: consul
      state: started
      enabled: yes

  - name: "Check if DB Private IP address exists in Consul"
    consul_kv:
      key: postgresql/ip_adress
    register: postgresql_ip_address

  - name: "Store private IP address"
    consul_kv:
      key: postgresql/ip_address
      value: "{{ item }}"
    with_items: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
    when: postgresql_ip_address.data is none

- block:
  - name: "Check if DB name already exists in Consul"
    consul_kv:
      key: postgresql/db/name
    register: db_name

  - name: "Store db name"
    consul_kv:
      key: postgresql/db/name
      value: "{{ item.name }}"
    with_items: "{{ postgresql_databases }}"
    when: db_name.data is none

- block:
  - name: "Check if DB port already exists in Consul"
    consul_kv:
      key: postgresql/db/port
    register: db_port

  - name: "Store db port"
    consul_kv:
      key: postgresql/db/port
      value: "{{ item.port }}"
    with_items: "{{ postgresql_databases }}"
    when: db_port.data is none

- block:
  - name: "Check if DB username already exists in Consul"
    consul_kv:
      key: postgresql/user/name
    register: user_name

  - name: "Store user name"
    consul_kv:
      key: postgresql/user/name
      value: "{{ item.name }}"
    with_items: "{{ postgresql_users }}"
    when: user_name.data is none

- block:
  - name: "Check if DB password already exists in Consul"
    consul_kv:
      key: postgresql/user/password
    register: user_password

  - name: "Store user password"
    consul_kv:
      key: postgresql/user/password
      value: "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
    when: user_password.data is none

  - name: "Read DB password from Consul"
    consul_kv:
      key: postgresql/user/password
    register: user_password

  - name: "Set postgresql password"
    set_fact: admin_password={{ user_password.data['Value'] }}
