---
- name: "Add EPEL repo for CentOS"
  package:
      name: epel-release
  when: ansible_os_family == 'RedHat'

- name: "Install pip"
  package:
    name: python3-pip
    state: latest

- name: "Upgrade pip"
  shell: pip3 install --upgrade pip

- name: "Install python-consul module"
  pip:
    name: python-consul
    executable: pip

- block:
    - name: Verify Consul service is running
      service:
        name: consul
        state: started
        enabled: yes

    - name: "Check if DB Private IP address exists in Consul"
      shell: /usr/local/bin/consul kv get postgresql/ip_address
      register: postgresql_ip_address
      ignore_errors: yes

    - debug:
        msg: "private ip from Consul: {{postgresql_ip_address.stdout}}"

    - name: "Store private IP address"
      shell: /usr/local/bin/consul kv put postgresql/ip_address "{{ item }}"
      with_items: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      when: postgresql_ip_address.stdout == ""

- block:
    - name: "Check if DB name already exists in Consul"
      shell: /usr/local/bin/consul kv get postgresql/db/name
      register: db_name
      ignore_errors: yes

    - name: "Store db name"
      shell: /usr/local/bin/consul kv put postgresql/db/name "{{ item.name }}"
      with_items: "{{ postgresql_databases }}"
      when: db_name.stdout == ""

- block:
    - name: "Check if DB port already exists in Consul"
      shell: /usr/local/bin/consul kv get postgresql/db/port
      register: db_port
      ignore_errors: yes

    - name: "Store db port"
      shell: /usr/local/bin/consul kv put postgresql/db/port "{{ item.port }}"
      with_items: "{{ postgresql_databases }}"
      when: db_port.stdout == ""

- block:
    - name: "Check if DB username already exists in Consul"
      shell: /usr/local/bin/consul kv get postgresql/user/name
      register: user_name
      ignore_errors: yes

    - name: "Store user name"
      shell: /usr/local/bin/consul kv put postgresql/user/name "{{ item.name }}"
      with_items: "{{ postgresql_users }}"
      when: user_name.stdout == ""

- block:
    - name: "Check if DB password already exists in Consul"
      shell: /usr/loca/bin/consul kv get postgresql/user/password
      register: user_password
      ignore_errors: yes

    - name: "Store user password"
      shell: /usr/local/bin/consul kv put postgresql/user/password "{{ lookup('password', '/dev/null length=8 chars=ascii_letters') }}"
      when: user_password.stdout == ""

    - name: "Read DB password from Consul"
      shell: /usr/local/bin/consul kv get postgresql/user/password
      register: user_password
      ignore_errors: yes

    - name: "Set postgresql password"
      set_fact: admin_password={{ user_password.stdout }}
