---
- block:
    - name: "Get DB name from Consul"
      shell: /usr/local/bin/consul kv get postgresql/db/name
      register: postgresql_db_name

    - name: "Get postgresql admin user name from Consul"
      shell: /usr/local/bin/consul kv get postgresql/user/name
      register: postgresql_user_name

    - name: "Get admin user password from Consul"
      shell: /usr/local/bin/consul kv get postgresql/user/password
      register: postgresql_user_password

- name: "Create cellids table"
  postgresql_table: 
    db: "{{ postgresql_db_name.stdout }}"
    name: cellids
    owner: "{{ postgresql_user_name.stdout }}"
    login_user: "{{ postgresql_user_name.stdout }}"
    login_password: "{{ postgresql_user_password.stdout }}"
    columns: 
    - mcc smallint
    - mnc smallint
    - tac int
    - eci int
    - earfcn int
    - pci smallint
    - sector_id char(16)
    - primary key (mcc, mnc, eci)

- name: "Create observed_cellids table"
  postgresql_table: 
    db: "{{ postgresql_db_name.stdout }}"
    name: observed_cellids
    owner: "{{ postgresql_user_name.stdout }}"
    login_user: "{{ postgresql_user_name.stdout }}"
    login_password: "{{ postgresql_user_password.stdout }}"
    columns: 
    - mcc smallint
    - mnc smallint
    - tac int
    - eci int
    - earfcn int
    - pci smallint
    - sector_id char(16)

- name: "Create procedure for updating cellids"
  postgresql_query:
    db:  "{{ postgresql_db_name.stdout }}"
    login_user: "{{ postgresql_user_name.stdout }}"
    login_password: "{{ postgresql_user_password.stdout }}"
    query: |
      CREATE OR REPLACE FUNCTION update_cellids()
      RETURNS TRIGGER AS
      $BODY$
      BEGIN
      INSERT INTO cellids (mcc, mnc, tac, eci, earfcn, pci, sector_id) VALUES (NEW.mcc, NEW.mnc, NEW.tac, NEW.eci, NEW.earfcn, NEW.pci, NEW.sector_id) ON CONFLICT ON CONSTRAINT cellids_pkey DO NOTHING;
      DELETE FROM observed_cellids WHERE (NEW.mcc = mcc AND NEW.mnc = mnc AND NEW.eci = eci);
      RETURN NEW;
      END;
      $BODY$
      LANGUAGE plpgsql;

- name: "Create trigger"
  postgresql_query:
    db: "{{ postgresql_db_name.stdout }}"
    login_user: "{{ postgresql_user_name.stdout }}"
    login_password: "{{ postgresql_user_password.stdout }}"
    query: |
      DROP TRIGGER IF EXISTS new_cellids ON observed_cellids;
      CREATE TRIGGER new_cellids
      AFTER INSERT ON observed_cellids
      FOR EACH ROW EXECUTE PROCEDURE update_cellids();      